/**
 * generated by Xtext 2.22.0
 */
package org.xtext.example.symboleo.symboleo.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.symboleo.symboleo.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SymboleoFactoryImpl extends EFactoryImpl implements SymboleoFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SymboleoFactory init()
  {
    try
    {
      SymboleoFactory theSymboleoFactory = (SymboleoFactory)EPackage.Registry.INSTANCE.getEFactory(SymboleoPackage.eNS_URI);
      if (theSymboleoFactory != null)
      {
        return theSymboleoFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SymboleoFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SymboleoFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SymboleoPackage.MODEL: return createModel();
      case SymboleoPackage.DOMAIN_CONCEPT: return createDomainConcept();
      case SymboleoPackage.REGULAR: return createRegular();
      case SymboleoPackage.ATTRIBUTE: return createAttribute();
      case SymboleoPackage.ENUMERATION: return createEnumeration();
      case SymboleoPackage.ENUM_ITEM: return createenumItem();
      case SymboleoPackage.CTYPE: return createCType();
      case SymboleoPackage.DOMAIN_TYPE: return createDomainType();
      case SymboleoPackage.BASIC_TYPE: return createBasicType();
      case SymboleoPackage.ONTO_CTYPE: return createOntoCType();
      case SymboleoPackage.PARAMETER: return createParameter();
      case SymboleoPackage.TYPE_NAME: return createTypeName();
      case SymboleoPackage.DECLAR_PAIR: return createDeclarPair();
      case SymboleoPackage.DECLAR: return createDeclar();
      case SymboleoPackage.OBLIGATION: return createObligation();
      case SymboleoPackage.POWER: return createPower();
      case SymboleoPackage.PROPOSITION: return createProposition();
      case SymboleoPackage.JUNCTION: return createJunction();
      case SymboleoPackage.NEGATION: return createNegation();
      case SymboleoPackage.ATOM: return createAtom();
      case SymboleoPackage.SIT_PROP: return createSitProp();
      case SymboleoPackage.EVENT_PROP: return createEventProp();
      case SymboleoPackage.INTERVAL: return createInterval();
      case SymboleoPackage.SIT_NAME: return createSitName();
      case SymboleoPackage.INT_CONST: return createIntConst();
      case SymboleoPackage.POINT: return createPoint();
      case SymboleoPackage.PEVENT: return createpEvent();
      case SymboleoPackage.CEVENT: return createcEvent();
      case SymboleoPackage.OEVENT: return createoEvent();
      case SymboleoPackage.POINT_CONST: return createPointConst();
      case SymboleoPackage.OSTATE: return createoState();
      case SymboleoPackage.CSTATE: return createcState();
      case SymboleoPackage.PSTATE: return createpState();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainConcept createDomainConcept()
  {
    DomainConceptImpl domainConcept = new DomainConceptImpl();
    return domainConcept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Regular createRegular()
  {
    RegularImpl regular = new RegularImpl();
    return regular;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public enumItem createenumItem()
  {
    enumItemImpl enumItem = new enumItemImpl();
    return enumItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CType createCType()
  {
    CTypeImpl cType = new CTypeImpl();
    return cType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainType createDomainType()
  {
    DomainTypeImpl domainType = new DomainTypeImpl();
    return domainType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicType createBasicType()
  {
    BasicTypeImpl basicType = new BasicTypeImpl();
    return basicType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OntoCType createOntoCType()
  {
    OntoCTypeImpl ontoCType = new OntoCTypeImpl();
    return ontoCType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeName createTypeName()
  {
    TypeNameImpl typeName = new TypeNameImpl();
    return typeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclarPair createDeclarPair()
  {
    DeclarPairImpl declarPair = new DeclarPairImpl();
    return declarPair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declar createDeclar()
  {
    DeclarImpl declar = new DeclarImpl();
    return declar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Obligation createObligation()
  {
    ObligationImpl obligation = new ObligationImpl();
    return obligation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Power createPower()
  {
    PowerImpl power = new PowerImpl();
    return power;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Proposition createProposition()
  {
    PropositionImpl proposition = new PropositionImpl();
    return proposition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Junction createJunction()
  {
    JunctionImpl junction = new JunctionImpl();
    return junction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Negation createNegation()
  {
    NegationImpl negation = new NegationImpl();
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Atom createAtom()
  {
    AtomImpl atom = new AtomImpl();
    return atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SitProp createSitProp()
  {
    SitPropImpl sitProp = new SitPropImpl();
    return sitProp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventProp createEventProp()
  {
    EventPropImpl eventProp = new EventPropImpl();
    return eventProp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interval createInterval()
  {
    IntervalImpl interval = new IntervalImpl();
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SitName createSitName()
  {
    SitNameImpl sitName = new SitNameImpl();
    return sitName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntConst createIntConst()
  {
    IntConstImpl intConst = new IntConstImpl();
    return intConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Point createPoint()
  {
    PointImpl point = new PointImpl();
    return point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public pEvent createpEvent()
  {
    pEventImpl pEvent = new pEventImpl();
    return pEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public cEvent createcEvent()
  {
    cEventImpl cEvent = new cEventImpl();
    return cEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public oEvent createoEvent()
  {
    oEventImpl oEvent = new oEventImpl();
    return oEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PointConst createPointConst()
  {
    PointConstImpl pointConst = new PointConstImpl();
    return pointConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public oState createoState()
  {
    oStateImpl oState = new oStateImpl();
    return oState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public cState createcState()
  {
    cStateImpl cState = new cStateImpl();
    return cState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public pState createpState()
  {
    pStateImpl pState = new pStateImpl();
    return pState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SymboleoPackage getSymboleoPackage()
  {
    return (SymboleoPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SymboleoPackage getPackage()
  {
    return SymboleoPackage.eINSTANCE;
  }

} //SymboleoFactoryImpl
